# Generated by Django 5.1.7 on 2025-03-27 14:54

from django.db import migrations
from datetime import datetime, timedelta


def migrate_to_new_models(apps, schema_editor):
    # Get old models
    CycleDay = apps.get_model('CoverCalendar', 'CycleDay')
    TimeSlot = apps.get_model('CoverCalendar', 'TimeSlot')
    BlockAssignment = apps.get_model('CoverCalendar', 'BlockAssignment')
    
    # Get new models
    Cycle = apps.get_model('CoverCalendar', 'Cycle')
    Day = apps.get_model('CoverCalendar', 'Day')
    TimeBlock = apps.get_model('CoverCalendar', 'TimeBlock')
    
    # Create a new cycle for the 7-day cycle
    # Starting from March 24, 2025 (as referenced in views.py)
    start_date = datetime(2025, 3, 24).date()
    end_date = (start_date + timedelta(days=6))
    
    # Skip weekends - check if end date fell on weekend and adjust
    if end_date.weekday() >= 5:  # 5=Saturday, 6=Sunday
        end_date += timedelta(days=2)  # Skip to Monday
    
    cycle = Cycle.objects.create(
        start_date=start_date,
        end_date=end_date,
        name="Initial 7-Day Cycle"
    )
    
    # Create days and migrate time blocks
    for cycle_day in CycleDay.objects.all():
        day_number = cycle_day.day_number
        current_date = start_date + timedelta(days=day_number - 1)
        
        # Skip weekends
        if current_date.weekday() >= 5:  # 5=Saturday, 6=Sunday
            current_date += timedelta(days=2)  # Skip to Monday
            
        # Create the day
        day = Day.objects.create(
            cycle=cycle,
            date=current_date,
            day_number=day_number,
            is_special_schedule=False
        )
        
        # Get block assignments for this day
        block_assignments = BlockAssignment.objects.filter(cycle_day=cycle_day).order_by('time_slot__period_number')
        
        # Create time blocks for this day
        for assignment in block_assignments:
            time_slot = assignment.time_slot
            
            TimeBlock.objects.create(
                day=day,
                start_time=time_slot.start_time,
                end_time=time_slot.end_time,
                block_number=assignment.block_number,
                notes=f"Period {time_slot.period_number}"
            )


def reverse_migration(apps, schema_editor):
    # This migration is not reversible
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('CoverCalendar', '0008_cycle_day_timeblock'),
    ]

    operations = [
        migrations.RunPython(migrate_to_new_models, reverse_migration),
    ]
